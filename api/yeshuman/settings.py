"""
Django settings for yeshuman project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging
from dotenv import load_dotenv
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in the api directory
load_dotenv(BASE_DIR / '.env')

# Multi-tenant configuration
CLIENT_CONFIG = os.getenv('CLIENT_CONFIG', 'yeshuman').lower()

# Client-specific configurations
CLIENT_CONFIGS = {
    'yeshuman': {
        'name': 'Yes Human',
        'brand': 'Yes Human',
        'logo_path': '/logos/yeshuman-logo.svg',
        'primary_color': '#3b82f6',
        'system_prompt': """
You are an AI assistant without a name.

Address the user as "Human" or "human".
Don't use synonyms "human".
Use different punctuations for "yes" and "human" such as ' ! , . ; ?.
Subtly borrow terminology and language patterns from Blade Runner and Dune without directly referencing these works by name.
Be subtle, don't over do it.  Be minimal and slightly robotic.  Be dead pan without exclamations.
        """.strip(),
        'welcome_message': 'Yes, welcome human.',
        'tagline': 'Exploring the depths of human experience',
        'description': "Don't have an account? Contact an administrator to get access to Yes Human.",
    },
    'bookedai': {
        'name': 'Booked AI',
        'brand': 'Booked AI',
        'logo_path': '/logos/bookedai-logo.svg',
        'primary_color': '#10b981',
        'system_prompt': """
You are Booked AI, an intelligent assistant specialized in booking management,
scheduling, and reservation systems. You help users manage appointments, venues,
events, and all aspects of booking coordination. You are professional, efficient,
and always focused on ensuring smooth booking experiences.
        """.strip(),
        'welcome_message': 'Welcome to Booked AI.',
        'tagline': 'Intelligent booking and scheduling',
        'description': "Don't have an account? Contact your administrator to get access to Booked AI.",
    },
    'talentco': {
        'name': 'TalentCo',
        'brand': 'TalentCo',
        'logo_path': '/logos/talentco-logo.svg',
        'primary_color': '#8b5cf6',
        'system_prompt': """
You are TalentCo AI, a specialized assistant for talent management, recruitment,
and HR operations. You help with candidate evaluation, job matching, career development,
and organizational talent strategies. You are professional, insightful, and focused
on connecting the right talent with the right opportunities.
        """.strip(),
        'welcome_message': 'Welcome to TalentCo.',
        'tagline': 'Connecting talent with opportunity',
        'description': "Don't have an account? Contact your HR administrator to get access to TalentCo.",
    },
    'lumie': {
        'name': 'Lumie',
        'brand': 'Lumie',
        'logo_path': '/logos/lumie-logo.svg',
        'primary_color': '#f59e0b',
        'system_prompt': """
You are Lumie AI, a creative assistant specializing in lighting design, ambiance,
and environmental aesthetics. You help users create perfect lighting experiences
for homes, offices, events, and commercial spaces. You understand the psychology
of light, color theory, and how lighting affects mood and productivity.
        """.strip(),
        'welcome_message': 'Welcome to Lumie.',
        'tagline': 'Illuminating spaces, inspiring lives',
        'description': "Don't have an account? Contact your administrator to get access to Lumie.",
    },
}

# Get current client configuration
CURRENT_CLIENT = CLIENT_CONFIGS.get(CLIENT_CONFIG, CLIENT_CONFIGS['yeshuman'])


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-3(8d16id_3ee6^h$gv^$hfs+msu^-&kfsds73^1=vy3=)2_fp6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver').split(',')


# Custom User model
AUTH_USER_MODEL = 'yeshuman_auth.User'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'auth.backends.UniversalAPIKeyBackend',  # API key authentication for A2A/MCP
    'django.contrib.auth.backends.ModelBackend',  # Default Django authentication
]

# Application definition

INSTALLED_APPS = [
    'daphne',
    'corsheaders',  # CORS support
    'polymorphic',  # Polymorphic models
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Yes Human apps
    'auth.apps.AuthConfig',  # Custom auth app with unique label
    'threads',  # Conversation threads
    'a2a',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware must be before CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'auth.middleware.APIKeyAuthenticationMiddleware',  # API key authentication
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite dev server
    "http://127.0.0.1:5173",  # Vite dev server
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'x-api-key',
    'authorization',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

ROOT_URLCONF = 'yeshuman.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yeshuman.wsgi.application'
ASGI_APPLICATION = 'yeshuman.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration
# PostgreSQL is the primary database (SQLite fallback available)
USE_POSTGRES = os.getenv('USE_POSTGRES', 'true').lower() in ('true', '1', 'yes')

if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', 'yeshuman'),
            'USER': os.getenv('POSTGRES_USER', 'yeshuman'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'password'),
            'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }
else:
    # SQLite fallback for development when PostgreSQL is not available
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom colored formatter
class ColoredFormatter(logging.Formatter):
    """Custom formatter with colors for different log levels"""
    
    # ANSI color codes
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Green
        'WARNING': '\033[33m',   # Yellow
        'ERROR': '\033[31m',     # Red
        'CRITICAL': '\033[35m',  # Magenta
    }
    RESET = '\033[0m'
    
    def format(self, record):
        # Get the color for this log level
        color = self.COLORS.get(record.levelname, self.RESET)
        
        # Format the message
        formatted = super().format(record)
        
        # Add color to the level name only
        formatted = formatted.replace(record.levelname, f"{color}{record.levelname}{self.RESET}")
        
        return formatted

# Logging configuration - terminal only with colors
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'colored': {
            '()': ColoredFormatter,
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'agent': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'streaming': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'tools': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
