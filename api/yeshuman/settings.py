"""
Django settings for yeshuman project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging
import json
from dotenv import load_dotenv
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in the api directory
load_dotenv(BASE_DIR / '.env')

# Load API-specific client configuration
CLIENT_CONFIG_PATH = BASE_DIR / 'client-config.json'
with open(CLIENT_CONFIG_PATH, 'r') as f:
    api_config = json.load(f)

# Multi-tenant configuration
CLIENT_CONFIG = os.getenv('CLIENT_CONFIG', 'yeshuman').lower()

# Use API-specific client configurations
CLIENT_CONFIGS = api_config['clients']

# Get current client configuration
CURRENT_CLIENT = CLIENT_CONFIGS.get(CLIENT_CONFIG, CLIENT_CONFIGS['yeshuman'])


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-3(8d16id_3ee6^h$gv^$hfs+msu^-&kfsds73^1=vy3=)2_fp6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# ALLOWED_HOSTS configuration for Railway deployment
ALLOWED_HOSTS_ENV = os.getenv('ALLOWED_HOSTS', '')

if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = ALLOWED_HOSTS_ENV.split(',')
else:
    # Default hosts for development
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']

# Railway optimization: Add Railway domains automatically for production
if os.getenv('RAILWAY_ENVIRONMENT'):
    railway_domains = [
        '.up.railway.app',
        '.railway.app'
    ]
    for domain in railway_domains:
        if domain not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(domain)

# Railway optimization: Production performance settings
if not DEBUG:
    # Disable auto-reloading in production for faster cold starts
    USE_TZ = True
    # Disable Django's development server features
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
            },
        },
    }


# Custom User model
AUTH_USER_MODEL = 'accounts.User'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'apps.accounts.backends.UniversalAPIKeyBackend',  # API key authentication for A2A/MCP
    'django.contrib.auth.backends.ModelBackend',  # Default Django authentication
]

# Application definition

INSTALLED_APPS = [
    'daphne',
    'corsheaders',  # CORS support
    'polymorphic',  # Polymorphic models
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Yes Human apps
    'apps.accounts',  # Custom accounts app with unique label
    'apps.applications',  # Job applications
    'apps.embeddings',  # AI/ML embeddings (provides pgvector)
    'apps.evaluations',  # Performance/candidate evaluations
    'apps.memories',  # Memory management
    'apps.opportunities',  # Opportunities
    'apps.organisations',  # Organizations
    'apps.profiles',  # User profiles
    'apps.seed',  # Data seeding utilities
    'apps.skills',  # Skills
    'apps.threads',  # Conversation threads
    'a2a',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'yeshuman.middleware.TrailingSlashMiddleware',  # Handle trailing slash normalization for NinjaAPI
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware must be before CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'apps.accounts.middleware.APIKeyAuthenticationMiddleware',  # API key authentication
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings - configurable via environment variable
CORS_ALLOWED_ORIGINS_DEFAULTS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite dev server
    "http://127.0.0.1:5173",  # Vite dev server
]

# Get CORS origins from environment variable or use defaults
cors_origins_env = os.getenv('CORS_ALLOWED_ORIGINS', '')
if cors_origins_env:
    # Parse comma-separated list of origins
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_env.split(',') if origin.strip()]
    # Add defaults if they're not already included
    for default_origin in CORS_ALLOWED_ORIGINS_DEFAULTS:
        if default_origin not in CORS_ALLOWED_ORIGINS:
            CORS_ALLOWED_ORIGINS.append(default_origin)
else:
    CORS_ALLOWED_ORIGINS = CORS_ALLOWED_ORIGINS_DEFAULTS.copy()

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'x-api-key',
    'authorization',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

ROOT_URLCONF = 'yeshuman.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yeshuman.wsgi.application'
ASGI_APPLICATION = 'yeshuman.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration
# Railway provides DATABASE_URL, fallback to individual variables for development
import dj_database_url

DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    # Use Railway's DATABASE_URL for production
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    # Railway optimization: Disable connection pooling for faster cold starts
    DATABASES['default']['CONN_MAX_AGE'] = 0  # Disable persistent connections
    DATABASES['default']['OPTIONS'] = {
        'connect_timeout': 10,  # Faster connection timeout
        'keepalives': 1,  # Enable TCP keepalives
        'keepalives_idle': 30,  # TCP keepalive idle time
        'keepalives_interval': 10,  # TCP keepalive interval
        'keepalives_count': 5,  # TCP keepalive count
    }
else:
    # Fallback configuration for development/local
    USE_POSTGRES = os.getenv('USE_POSTGRES', 'true').lower() in ('true', '1', 'yes')

    if USE_POSTGRES:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('POSTGRES_DB', 'yeshuman'),
                'USER': os.getenv('POSTGRES_USER', 'yeshuman'),
                'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'password'),
                'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
                'PORT': os.getenv('POSTGRES_PORT', '5432'),
            }
        }
    else:
        # SQLite fallback for development when PostgreSQL is not available
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Static files configuration for Railway deployment
STATIC_ROOT = BASE_DIR / 'staticfiles'

# No additional static files directories needed for API-only project

# Static files storage for production
if not DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# URL Configuration - More forgiving URL matching
# https://docs.djangoproject.com/en/5.2/ref/settings/#append-slash
APPEND_SLASH = False  # Disabled to avoid POST redirect issues with MCP

# Note: TrailingSlashMiddleware has been moved to yeshuman/middleware.py

# Custom colored formatter
class ColoredFormatter(logging.Formatter):
    """Custom formatter with colors for different log levels"""
    
    # ANSI color codes
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Green
        'WARNING': '\033[33m',   # Yellow
        'ERROR': '\033[31m',     # Red
        'CRITICAL': '\033[35m',  # Magenta
    }
    RESET = '\033[0m'
    
    def format(self, record):
        # Get the color for this log level
        color = self.COLORS.get(record.levelname, self.RESET)
        
        # Format the message
        formatted = super().format(record)
        
        # Add color to the level name only
        formatted = formatted.replace(record.levelname, f"{color}{record.levelname}{self.RESET}")
        
        return formatted

# Logging configuration - terminal only with colors
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'colored': {
            '()': ColoredFormatter,
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'colored',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'agent': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'streaming': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'yeshuman.middleware': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'tools': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
